// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/semho/chat-microservices/auth/internal/repository.LoginRepository -o login_repository_minimock.go -n LoginRepositoryMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/semho/chat-microservices/auth/internal/model"
)

// LoginRepositoryMock implements repository.LoginRepository
type LoginRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetUserByUsername          func(ctx context.Context, username string) (up1 *model.User, err error)
	inspectFuncGetUserByUsername   func(ctx context.Context, username string)
	afterGetUserByUsernameCounter  uint64
	beforeGetUserByUsernameCounter uint64
	GetUserByUsernameMock          mLoginRepositoryMockGetUserByUsername
}

// NewLoginRepositoryMock returns a mock for repository.LoginRepository
func NewLoginRepositoryMock(t minimock.Tester) *LoginRepositoryMock {
	m := &LoginRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetUserByUsernameMock = mLoginRepositoryMockGetUserByUsername{mock: m}
	m.GetUserByUsernameMock.callArgs = []*LoginRepositoryMockGetUserByUsernameParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mLoginRepositoryMockGetUserByUsername struct {
	mock               *LoginRepositoryMock
	defaultExpectation *LoginRepositoryMockGetUserByUsernameExpectation
	expectations       []*LoginRepositoryMockGetUserByUsernameExpectation

	callArgs []*LoginRepositoryMockGetUserByUsernameParams
	mutex    sync.RWMutex
}

// LoginRepositoryMockGetUserByUsernameExpectation specifies expectation struct of the LoginRepository.GetUserByUsername
type LoginRepositoryMockGetUserByUsernameExpectation struct {
	mock    *LoginRepositoryMock
	params  *LoginRepositoryMockGetUserByUsernameParams
	results *LoginRepositoryMockGetUserByUsernameResults
	Counter uint64
}

// LoginRepositoryMockGetUserByUsernameParams contains parameters of the LoginRepository.GetUserByUsername
type LoginRepositoryMockGetUserByUsernameParams struct {
	ctx      context.Context
	username string
}

// LoginRepositoryMockGetUserByUsernameResults contains results of the LoginRepository.GetUserByUsername
type LoginRepositoryMockGetUserByUsernameResults struct {
	up1 *model.User
	err error
}

// Expect sets up expected params for LoginRepository.GetUserByUsername
func (mmGetUserByUsername *mLoginRepositoryMockGetUserByUsername) Expect(ctx context.Context, username string) *mLoginRepositoryMockGetUserByUsername {
	if mmGetUserByUsername.mock.funcGetUserByUsername != nil {
		mmGetUserByUsername.mock.t.Fatalf("LoginRepositoryMock.GetUserByUsername mock is already set by Set")
	}

	if mmGetUserByUsername.defaultExpectation == nil {
		mmGetUserByUsername.defaultExpectation = &LoginRepositoryMockGetUserByUsernameExpectation{}
	}

	mmGetUserByUsername.defaultExpectation.params = &LoginRepositoryMockGetUserByUsernameParams{ctx, username}
	for _, e := range mmGetUserByUsername.expectations {
		if minimock.Equal(e.params, mmGetUserByUsername.defaultExpectation.params) {
			mmGetUserByUsername.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetUserByUsername.defaultExpectation.params)
		}
	}

	return mmGetUserByUsername
}

// Inspect accepts an inspector function that has same arguments as the LoginRepository.GetUserByUsername
func (mmGetUserByUsername *mLoginRepositoryMockGetUserByUsername) Inspect(f func(ctx context.Context, username string)) *mLoginRepositoryMockGetUserByUsername {
	if mmGetUserByUsername.mock.inspectFuncGetUserByUsername != nil {
		mmGetUserByUsername.mock.t.Fatalf("Inspect function is already set for LoginRepositoryMock.GetUserByUsername")
	}

	mmGetUserByUsername.mock.inspectFuncGetUserByUsername = f

	return mmGetUserByUsername
}

// Return sets up results that will be returned by LoginRepository.GetUserByUsername
func (mmGetUserByUsername *mLoginRepositoryMockGetUserByUsername) Return(up1 *model.User, err error) *LoginRepositoryMock {
	if mmGetUserByUsername.mock.funcGetUserByUsername != nil {
		mmGetUserByUsername.mock.t.Fatalf("LoginRepositoryMock.GetUserByUsername mock is already set by Set")
	}

	if mmGetUserByUsername.defaultExpectation == nil {
		mmGetUserByUsername.defaultExpectation = &LoginRepositoryMockGetUserByUsernameExpectation{mock: mmGetUserByUsername.mock}
	}
	mmGetUserByUsername.defaultExpectation.results = &LoginRepositoryMockGetUserByUsernameResults{up1, err}
	return mmGetUserByUsername.mock
}

// Set uses given function f to mock the LoginRepository.GetUserByUsername method
func (mmGetUserByUsername *mLoginRepositoryMockGetUserByUsername) Set(f func(ctx context.Context, username string) (up1 *model.User, err error)) *LoginRepositoryMock {
	if mmGetUserByUsername.defaultExpectation != nil {
		mmGetUserByUsername.mock.t.Fatalf("Default expectation is already set for the LoginRepository.GetUserByUsername method")
	}

	if len(mmGetUserByUsername.expectations) > 0 {
		mmGetUserByUsername.mock.t.Fatalf("Some expectations are already set for the LoginRepository.GetUserByUsername method")
	}

	mmGetUserByUsername.mock.funcGetUserByUsername = f
	return mmGetUserByUsername.mock
}

// When sets expectation for the LoginRepository.GetUserByUsername which will trigger the result defined by the following
// Then helper
func (mmGetUserByUsername *mLoginRepositoryMockGetUserByUsername) When(ctx context.Context, username string) *LoginRepositoryMockGetUserByUsernameExpectation {
	if mmGetUserByUsername.mock.funcGetUserByUsername != nil {
		mmGetUserByUsername.mock.t.Fatalf("LoginRepositoryMock.GetUserByUsername mock is already set by Set")
	}

	expectation := &LoginRepositoryMockGetUserByUsernameExpectation{
		mock:   mmGetUserByUsername.mock,
		params: &LoginRepositoryMockGetUserByUsernameParams{ctx, username},
	}
	mmGetUserByUsername.expectations = append(mmGetUserByUsername.expectations, expectation)
	return expectation
}

// Then sets up LoginRepository.GetUserByUsername return parameters for the expectation previously defined by the When method
func (e *LoginRepositoryMockGetUserByUsernameExpectation) Then(up1 *model.User, err error) *LoginRepositoryMock {
	e.results = &LoginRepositoryMockGetUserByUsernameResults{up1, err}
	return e.mock
}

// GetUserByUsername implements repository.LoginRepository
func (mmGetUserByUsername *LoginRepositoryMock) GetUserByUsername(ctx context.Context, username string) (up1 *model.User, err error) {
	mm_atomic.AddUint64(&mmGetUserByUsername.beforeGetUserByUsernameCounter, 1)
	defer mm_atomic.AddUint64(&mmGetUserByUsername.afterGetUserByUsernameCounter, 1)

	if mmGetUserByUsername.inspectFuncGetUserByUsername != nil {
		mmGetUserByUsername.inspectFuncGetUserByUsername(ctx, username)
	}

	mm_params := LoginRepositoryMockGetUserByUsernameParams{ctx, username}

	// Record call args
	mmGetUserByUsername.GetUserByUsernameMock.mutex.Lock()
	mmGetUserByUsername.GetUserByUsernameMock.callArgs = append(mmGetUserByUsername.GetUserByUsernameMock.callArgs, &mm_params)
	mmGetUserByUsername.GetUserByUsernameMock.mutex.Unlock()

	for _, e := range mmGetUserByUsername.GetUserByUsernameMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.up1, e.results.err
		}
	}

	if mmGetUserByUsername.GetUserByUsernameMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetUserByUsername.GetUserByUsernameMock.defaultExpectation.Counter, 1)
		mm_want := mmGetUserByUsername.GetUserByUsernameMock.defaultExpectation.params
		mm_got := LoginRepositoryMockGetUserByUsernameParams{ctx, username}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetUserByUsername.t.Errorf("LoginRepositoryMock.GetUserByUsername got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetUserByUsername.GetUserByUsernameMock.defaultExpectation.results
		if mm_results == nil {
			mmGetUserByUsername.t.Fatal("No results are set for the LoginRepositoryMock.GetUserByUsername")
		}
		return (*mm_results).up1, (*mm_results).err
	}
	if mmGetUserByUsername.funcGetUserByUsername != nil {
		return mmGetUserByUsername.funcGetUserByUsername(ctx, username)
	}
	mmGetUserByUsername.t.Fatalf("Unexpected call to LoginRepositoryMock.GetUserByUsername. %v %v", ctx, username)
	return
}

// GetUserByUsernameAfterCounter returns a count of finished LoginRepositoryMock.GetUserByUsername invocations
func (mmGetUserByUsername *LoginRepositoryMock) GetUserByUsernameAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetUserByUsername.afterGetUserByUsernameCounter)
}

// GetUserByUsernameBeforeCounter returns a count of LoginRepositoryMock.GetUserByUsername invocations
func (mmGetUserByUsername *LoginRepositoryMock) GetUserByUsernameBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetUserByUsername.beforeGetUserByUsernameCounter)
}

// Calls returns a list of arguments used in each call to LoginRepositoryMock.GetUserByUsername.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetUserByUsername *mLoginRepositoryMockGetUserByUsername) Calls() []*LoginRepositoryMockGetUserByUsernameParams {
	mmGetUserByUsername.mutex.RLock()

	argCopy := make([]*LoginRepositoryMockGetUserByUsernameParams, len(mmGetUserByUsername.callArgs))
	copy(argCopy, mmGetUserByUsername.callArgs)

	mmGetUserByUsername.mutex.RUnlock()

	return argCopy
}

// MinimockGetUserByUsernameDone returns true if the count of the GetUserByUsername invocations corresponds
// the number of defined expectations
func (m *LoginRepositoryMock) MinimockGetUserByUsernameDone() bool {
	for _, e := range m.GetUserByUsernameMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetUserByUsernameMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetUserByUsernameCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetUserByUsername != nil && mm_atomic.LoadUint64(&m.afterGetUserByUsernameCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetUserByUsernameInspect logs each unmet expectation
func (m *LoginRepositoryMock) MinimockGetUserByUsernameInspect() {
	for _, e := range m.GetUserByUsernameMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to LoginRepositoryMock.GetUserByUsername with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetUserByUsernameMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetUserByUsernameCounter) < 1 {
		if m.GetUserByUsernameMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to LoginRepositoryMock.GetUserByUsername")
		} else {
			m.t.Errorf("Expected call to LoginRepositoryMock.GetUserByUsername with params: %#v", *m.GetUserByUsernameMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetUserByUsername != nil && mm_atomic.LoadUint64(&m.afterGetUserByUsernameCounter) < 1 {
		m.t.Error("Expected call to LoginRepositoryMock.GetUserByUsername")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *LoginRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetUserByUsernameInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *LoginRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *LoginRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetUserByUsernameDone()
}
