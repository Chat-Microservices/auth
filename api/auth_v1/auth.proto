syntax = "proto3";

package auth_v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "validate/validate.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/semho/chat-microservices/pkg/auth_v1;auth_v1";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Auth API"
    version: "0.0.1"
    contact: {
      name: "semho"
      email: "semhowork@gmail.com"
    };
  };

  host: "localhost:8080",
  schemes: HTTP,
  schemes: HTTPS,
  consumes: "application/json",
  produces: "application/json",
};

service AuthV1 {
  // Создание пользователя
  rpc Create(CreateRequest) returns (CreateResponse){
    option (google.api.http) = {
      post: "/auth/v1/create"
      body: "*"
    };
  };
  // Получение пользователя
  rpc Get(GetRequest) returns (UserResponse){
    option (google.api.http) = {
      get: "/auth/v1"
    };
  };
  // Обновление пользователя
  rpc Update(UpdateRequest) returns (google.protobuf.Empty){
    option (google.api.http) = {
      patch: "/auth/v1"
      body: "*"
    };
  };
  // Удаление пользователя
  rpc Delete(DeleteRequest) returns (google.protobuf.Empty){
    option (google.api.http) = {
      delete: "/auth/v1"
    };
  };
  // Список логов
  rpc GetListLogs(GetListLogsRequest) returns (LogsResponse){
    option (google.api.http) = {
      get: "/auth/v1/list"
    };
  };
}

message GetListLogsRequest {
  // Номер страницы
  uint64 page_number = 1;
  // Количество записей на странице
  uint64 page_size = 2;
}

message LogsResponse {
  repeated Log logs = 1;
}

message Log {
  int64 id = 1;
  string action = 2;
  int64 entity_id = 3;
  string query = 4;
  google.protobuf.Timestamp created_at = 5;
  google.protobuf.Timestamp updated_at = 6;
}

enum Role {
  user = 0;
  admin = 1;
}

message UserPassword {
  // Пароль пользователя
  string password = 1 [(validate.rules).string = {min_len: 5, max_len: 20}];
  string password_confirm = 2 [(validate.rules).string = {min_len: 5, max_len: 20}];
}

message UserDetail {
  // Имя пользователя
  string name = 1 [(validate.rules).string = {
    pattern:   "^[A-Za-z]+( [A-Za-z]+)*$",
    min_len: 2,
    max_len: 20
  }];
  // Почта пользователя
  string email = 2 [(validate.rules).string.email = true];
  // Роль пользователя
  optional Role role = 3  [(validate.rules).enum.defined_only = true];
}

message User {
  int64 id = 1;
  UserDetail detail = 2;
  UserPassword password = 3;
  google.protobuf.Timestamp created_at = 4;
  google.protobuf.Timestamp updated_at = 5;
}

message UserResponse{
  int64 id = 1;
  UserDetail detail = 2;
  google.protobuf.Timestamp created_at = 3;
  google.protobuf.Timestamp updated_at = 4;
}

message UpdateUserInfo {
  google.protobuf.StringValue name = 1;
  google.protobuf.StringValue email = 2;
}

message CreateRequest {
  UserDetail detail = 1;
  UserPassword password = 2;
}

message CreateResponse {
  int64 id = 1;
}

message GetRequest {
  int64 id = 1;
}

message UpdateRequest {
  int64 id = 1;
  UpdateUserInfo info = 2;
}

message DeleteRequest {
  int64 id = 1;
}